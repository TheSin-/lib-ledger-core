@extern "../../ledger-core/idl/core.yaml"

# Main Ripple interface file.
#
# This file serves as API entry point and defines everything that can be manipulated from a foreign
# perspective.
#
# You are supposed to add whatever you see fit in this file and then a code generator (using
# djinni) must be called to both generate the interface files you need to implement (C++) and the
# foreign languages bindings.

# Ripple network parameters.
RippleLikeNetworkParameters = record {
	Identifier: string;
	MessagePrefix: string;
	XPUBVersion: binary;
	AdditionalRIPs: list<string>;
	TimestampDelay: i64;
}

# Helper class for manipulating Ripple like addresses
RippleLikeAddress = interface +c {
	# Gets the version of the address
	# @return The version of the address
	getVersion(): binary;
	# Gets the raw hash160 of the public key
	# @return The 20 bytes of the public key hash160
	getHash160(): binary;
	# Gets the network parameters used for serializing the address
	# @return The network parameters of the address
	getNetworkParameters(): RippleLikeNetworkParameters;
	# Serializes the hash160 into a Base58 encoded address (with checksum)
	# @return The Base58 serialization
	toBase58(): string;
}

RippleLikeExtendedPublicKey = interface +c {
	derive(path: string): RippleLikeAddress;
	derivePublicKey(path: string): binary;
	deriveHash160(path: string): binary;
	toBase58(): string;
	getRootPath(): string;
}

# TODO: to be more accurate, all RippleLikeBlock classes should be renamed as RippleLikeLedger,
# since there is an analogy between block and ledger concepts it's ok for the moment ...

#Class representing a Ripple transaction
RippleLikeTransaction = interface +c {
	# Get the hash of the transaction.
	getHash(): string;
	# Get Fees (in drop)
	getFees(): Amount;
	# Get destination XRP address
	getReceiver(): RippleLikeAddress;
	# Get XRP sender address
	getSender(): RippleLikeAddress;
	# Get amount of XRP to send
	getValue(): Amount;
	# Serialize the transaction to its raw format.
	serialize(): binary;
	# Set signature of transaction, when a signature is set serialize method gives back serialized Tx
	setSignature(rSignature: binary, sSignature: binary);
	setDERSignature(signature: binary);
	# Get the time when the transaction was issued or the time of the block including
	# this transaction
	getDate(): date;
	# Get block to which transaction belongs (was mined in)
	#getBlock(): optional<RippleLikeBlock>;
	# Get sequence of an account when tx was built (number of sent transactions from an account)
	getSequence(): BigInt;
	# Get Ledger's sequence in which the tx was included
	getLedgerSequence(): BigInt;
	# Get Signing public Key
	getSigningPubKey(): binary;
}

#Class representing a Ripple Operation
RippleLikeOperation = interface +c {
	#Get operation's transaction
	#@return RippleLikeTransaction object
	getTransaction(): RippleLikeTransaction;
}

#Class representing Bitcoin block
RippleLikeBlock = interface +c {
	#Hash of block
	#@return string representing hash of this block
	getHash(): string;
	#Height of block in blockchain
	#@return 64 bits integer, height of block
	getHeight(): i64;
	#Timestamp when block was mined
	#@return Date object, date when block was appended to blockchain
	getTime(): date;
}

RippleLikeTransactionBuilder = interface +c {

	# Send funds to the given address. This method can be called multiple times to send to multiple addresses.
	# @param amount The value to send
	# @param address Address of the recipient
	# @return A reference on the same builder in order to chain calls.
	sendToAddress(amount: Amount, address: string): RippleLikeTransactionBuilder;

	# Send all available funds to the given address.
	# @param address Address of the recipient
	# @return A reference on the same builder in order to chain calls.
	wipeToAddress(address: string): RippleLikeTransactionBuilder;

	# Set fees (in drop) the originator is willing to pay
	# @return A reference on the same builder in order to chain calls.
	setFees(fees: Amount): RippleLikeTransactionBuilder;

	# Build a transaction from the given builder parameters.
	build(callback: Callback<RippleLikeTransaction>);

	# Creates a clone of this builder.
	# @return A copy of the current builder instance.
	clone(): RippleLikeTransactionBuilder;

	# Reset the current instance to its initial state
	reset();

	static parseRawUnsignedTransaction(currency: Currency, rawTransaction: binary): RippleLikeTransaction;
	static parseRawSignedTransaction(currency: Currency, rawTransaction: binary): RippleLikeTransaction;
}

#Class representing a Ripple account
RippleLikeAccount = interface +c {
	broadcastRawTransaction(transaction: binary, callback: Callback<string>);
	broadcastTransaction(transaction: RippleLikeTransaction, callback: Callback<string>);
	buildTransaction(): RippleLikeTransactionBuilder;
}

RippleConfigurationDefaults = interface +c {
	const RIPPLE_DEFAULT_API_ENDPOINT: string = "https://data.ripple.com";
	const RIPPLE_OBSERVER_NODE_ENDPOINT_S2: string = "https://s2.ripple.com";
	const RIPPLE_OBSERVER_NODE_ENDPOINT_S3: string = "https://s3.ripple.com";
	const RIPPLE_OBSERVER_WS_ENDPOINT_S2: string = "wss://s2.ripple.com";
	const RIPPLE_OBSERVER_WS_ENDPOINT_S3: string = "wss://s3.ripple.com";
	const RIPPLE_DEFAULT_PORT: string = "51234";
}
