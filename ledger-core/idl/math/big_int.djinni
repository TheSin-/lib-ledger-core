# Immutable class representing a potentially very long number.
BigInt = interface +c {
    # Adds two BigInt and returns a new BigInt with the result.
    # @params i Value to be added to this BigInt
    # @return The result of this + i
    add(i: BigInt): BigInt;
    # Subtracts two BigInt and returns a new BigInt with result.
    # @params i Value to be subtracted to this BigInt
    # @return The result of this - i
    subtract(i: BigInt): BigInt;
    # Multiplies two BigInt and returns a new BigInt with result.
    # @params i Value to be multiplied by this BigInt
    # @return The result of this * i
    multiply(i: BigInt): BigInt;
    # Divides two BigInt and returns a new BigInt with result.
    # @params i Value by which this BigInt will be divided
    # @return The result of this / i
    divide(i: BigInt): BigInt;
    # Divides two BigInt and returns a new BigInt with result of the division and the remainder.
    # @params i Value by which this BigInteger is to be divided, and the remainder computed
    # @return A tuple of [this / i, this % i]
    divideAndRemainder(i: BigInt): list<BigInt>;
    # Raises this BigInt with an interger value.
    # @params i The exponent to which thi BigInt is raised
    # @return The result of this ^ exponent
    pow(exponent: i32): BigInt;
    # Formats this BigInt to a decimal string (e.g. BigInt("12345").toDecimalString(1, ".", ",") => "1,234.5").
    # @params precision The power of ten by wich this BigInt is divided
    # @params decimalSeparator The separator to use between the integer part and the decimal part
    # @params thousandSeparator The separator to use between each group of thousand units
    # @return The BigInt formatted as a decimal string
    toDecimalString(precision: i32, decimalSeparator: string, thousandSeparator: string): string;
    # Formats this BigInt to the interger representation of its internal value.
    # @params radix The radix of the number representation in which to format (right now 10 or 16)
    toString(radix: i32): string;
    # Returns the int representation of this BigInt. Note that if the BigInt is greater than 4 bytes the returned value
    # will be meaningless.
    # @return The int representation of this BigInt
    intValue(): i32;
    # Compares two BigInt together.
    # @param i The value to compare with this BigInt
    # @return a positive value if this > i. A negative value if this < i. 0 if the two BigInts are equal
    compare(i: BigInt): i32;

    # Creates a BigInt with a decimal string (e.g. "1.2000"). Note that every non numeric characters (except the decimal separator)
    # are ignored (e.g. "1ledger000" will be equal to "1000").
    # @param s The string with the decimal representation of the BigInt
    # @param precision The power of ten by which your decimal number must be multiplied in order to get his integer representation
    # @params decimalSeparator The decimal separator used by this string representation
    # @return The created BigInt
    static fromDecimalString(s: string, precision: i32, decimalSeparator: string): BigInt;
    # Creates a BigInt with an integer string expressed in hexadecimal or decimal radix.
    # @param s The string to parse
    # @param radix The radix of the number representation (right now 10 or 16)
    # @return The created BigInt
    static fromIntegerString(s: string, radix: i32): BigInt;
    # Creates a BigInt from a int64 value.
    # @param l The value to convert
    # @return The created BigInt
    static fromLong(l: i64): BigInt;
}
