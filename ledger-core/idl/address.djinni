@import "currency.djinni"

Address = interface +c {
    # Gets an optional derivation path (if the address is owned by an account).
    # @return The derivation path of the address
    getDerivationPath(): optional<string>;

    # Serialize the address to a string. The serialization method depends of the underlying currency and
    # format (Base58, Bech32, Ethereum...).
    toString(): string;

    # Get the currency associated with this address.
    getCurrency(): Currency;

    # Attempt to parse a string address.
    # @param address The string to parse
    # @param currency The currency used to parse the address
    # @return If successful, returns the address, otherwise none.
    static parse(address: string, currency: Currency): optional<Address>;

    # Check whether the given string formatted address is valid or not.
    # @param address The string to parse
    # @param currency The currency used to parse the address
    # @return If successful, returns true; false otherwise.
    static isValid(address: string, currency: Currency): bool;
}

