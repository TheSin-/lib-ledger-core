# AUTOGENERATED FILE - DO NOT MODIFY!
# This file generated by Djinni from amount.djinni, big_int.djinni, core.djinni, crypto.djinni, currency.djinni, errors.djinni, http_client.djinni, locale.djinni, logger.djinni, path_resolver.djinni, random.djinni, secp256k1.djinni, thread_dispatcher.djinni, websocket_client.djinni
---
name: Amount
typedef: 'interface +c'
params: []
prefix: ""
cpp:
  typename: '::ledger::core::api::Amount'
  header: '"Amount.hpp"'
  byValue: false
objc:
  typename: 'Amount'
  pointer: true
  hash: '%s.hash'
  boxed: 'Amount'
  header: '"Amount.h"'
objcpp:
  translator: '::djinni_generated::Amount'
  header: '"Amount+Private.h"'
java:
  reference: true
  typename: 'Amount'
  writeToParcel: '%s.writeToParcel(out, flags)'
  generic: true
  readFromParcel: 'new %s(in)'
  hash: '%s.hashCode()'
  boxed: 'Amount'
jni:
  translator: '::djinni_generated::Amount'
  header: '"Amount.hpp"'
  typename: jobject
  typeSignature: 'LAmount;'
---
name: BigInt
typedef: 'interface +c'
params: []
prefix: ""
cpp:
  typename: '::ledger::core::api::BigInt'
  header: '"BigInt.hpp"'
  byValue: false
objc:
  typename: 'BigInt'
  pointer: true
  hash: '%s.hash'
  boxed: 'BigInt'
  header: '"BigInt.h"'
objcpp:
  translator: '::djinni_generated::BigInt'
  header: '"BigInt+Private.h"'
java:
  reference: true
  typename: 'BigInt'
  writeToParcel: '%s.writeToParcel(out, flags)'
  generic: true
  readFromParcel: 'new %s(in)'
  hash: '%s.hashCode()'
  boxed: 'BigInt'
jni:
  translator: '::djinni_generated::BigInt'
  header: '"BigInt.hpp"'
  typename: jobject
  typeSignature: 'LBigInt;'
---
name: Currency
typedef: 'record'
params: []
prefix: ""
cpp:
  typename: '::ledger::core::api::Currency'
  header: '"Currency.hpp"'
  byValue: false
objc:
  typename: 'Currency'
  pointer: true
  hash: '%s.hash'
  boxed: 'Currency'
  header: '"Currency.h"'
objcpp:
  translator: '::djinni_generated::Currency'
  header: '"Currency+Private.h"'
java:
  reference: true
  typename: 'Currency'
  writeToParcel: '%s.writeToParcel(out, flags)'
  generic: true
  readFromParcel: 'new %s(in)'
  hash: '%s.hashCode()'
  boxed: 'Currency'
jni:
  translator: '::djinni_generated::Currency'
  header: '"Currency.hpp"'
  typename: jobject
  typeSignature: 'LCurrency;'
---
name: CurrencyUnit
typedef: 'record'
params: []
prefix: ""
cpp:
  typename: '::ledger::core::api::CurrencyUnit'
  header: '"CurrencyUnit.hpp"'
  byValue: false
objc:
  typename: 'CurrencyUnit'
  pointer: true
  hash: '%s.hash'
  boxed: 'CurrencyUnit'
  header: '"CurrencyUnit.h"'
objcpp:
  translator: '::djinni_generated::CurrencyUnit'
  header: '"CurrencyUnit+Private.h"'
java:
  reference: true
  typename: 'CurrencyUnit'
  writeToParcel: '%s.writeToParcel(out, flags)'
  generic: true
  readFromParcel: 'new %s(in)'
  hash: '%s.hashCode()'
  boxed: 'CurrencyUnit'
jni:
  translator: '::djinni_generated::CurrencyUnit'
  header: '"CurrencyUnit.hpp"'
  typename: jobject
  typeSignature: 'LCurrencyUnit;'
---
name: Error
typedef: 'record'
params: []
prefix: ""
cpp:
  typename: '::ledger::core::api::Error'
  header: '"Error.hpp"'
  byValue: false
objc:
  typename: 'Error'
  pointer: true
  hash: '%s.hash'
  boxed: 'Error'
  header: '"Error.h"'
objcpp:
  translator: '::djinni_generated::Error'
  header: '"Error+Private.h"'
java:
  reference: true
  typename: 'Error'
  writeToParcel: '%s.writeToParcel(out, flags)'
  generic: true
  readFromParcel: 'new %s(in)'
  hash: '%s.hashCode()'
  boxed: 'Error'
jni:
  translator: '::djinni_generated::Error'
  header: '"Error.hpp"'
  typename: jobject
  typeSignature: 'LError;'
---
name: ErrorCode
typedef: 'enum'
params: []
prefix: ""
cpp:
  typename: '::ledger::core::api::ErrorCode'
  header: '"ErrorCode.hpp"'
  byValue: true
objc:
  typename: 'ErrorCode'
  pointer: false
  hash: '%s.hash'
  boxed: 'NSNumber'
  header: '"ErrorCode.h"'
objcpp:
  translator: '::djinni::Enum<::ledger::core::api::ErrorCode, ErrorCode>'
  header: '"ErrorCode+Private.h"'
java:
  reference: true
  typename: 'ErrorCode'
  writeToParcel: '%s.writeToParcel(out, flags)'
  generic: true
  readFromParcel: 'new %s(in)'
  hash: '%s.hashCode()'
  boxed: 'ErrorCode'
jni:
  translator: '::djinni_generated::ErrorCode'
  header: '"ErrorCode.hpp"'
  typename: jobject
  typeSignature: 'LErrorCode;'
---
name: ExecutionContext
typedef: 'interface +o +j'
params: []
prefix: ""
cpp:
  typename: '::ledger::core::api::ExecutionContext'
  header: '"ExecutionContext.hpp"'
  byValue: false
objc:
  typename: 'ExecutionContext'
  pointer: true
  hash: '%s.hash'
  boxed: 'ExecutionContext'
  header: '"ExecutionContext.h"'
objcpp:
  translator: '::djinni_generated::ExecutionContext'
  header: '"ExecutionContext+Private.h"'
java:
  reference: true
  typename: 'ExecutionContext'
  writeToParcel: '%s.writeToParcel(out, flags)'
  generic: true
  readFromParcel: 'new %s(in)'
  hash: '%s.hashCode()'
  boxed: 'ExecutionContext'
jni:
  translator: '::djinni_generated::ExecutionContext'
  header: '"ExecutionContext.hpp"'
  typename: jobject
  typeSignature: 'LExecutionContext;'
---
name: FormatRules
typedef: 'record'
params: []
prefix: ""
cpp:
  typename: '::ledger::core::api::FormatRules'
  header: '"FormatRules.hpp"'
  byValue: false
objc:
  typename: 'FormatRules'
  pointer: true
  hash: '%s.hash'
  boxed: 'FormatRules'
  header: '"FormatRules.h"'
objcpp:
  translator: '::djinni_generated::FormatRules'
  header: '"FormatRules+Private.h"'
java:
  reference: true
  typename: 'FormatRules'
  writeToParcel: '%s.writeToParcel(out, flags)'
  generic: true
  readFromParcel: 'new %s(in)'
  hash: '%s.hashCode()'
  boxed: 'FormatRules'
jni:
  translator: '::djinni_generated::FormatRules'
  header: '"FormatRules.hpp"'
  typename: jobject
  typeSignature: 'LFormatRules;'
---
name: HashAlgorithmHelper
typedef: 'interface +o +j'
params: []
prefix: ""
cpp:
  typename: '::ledger::core::api::HashAlgorithmHelper'
  header: '"HashAlgorithmHelper.hpp"'
  byValue: false
objc:
  typename: 'HashAlgorithmHelper'
  pointer: true
  hash: '%s.hash'
  boxed: 'HashAlgorithmHelper'
  header: '"HashAlgorithmHelper.h"'
objcpp:
  translator: '::djinni_generated::HashAlgorithmHelper'
  header: '"HashAlgorithmHelper+Private.h"'
java:
  reference: true
  typename: 'HashAlgorithmHelper'
  writeToParcel: '%s.writeToParcel(out, flags)'
  generic: true
  readFromParcel: 'new %s(in)'
  hash: '%s.hashCode()'
  boxed: 'HashAlgorithmHelper'
jni:
  translator: '::djinni_generated::HashAlgorithmHelper'
  header: '"HashAlgorithmHelper.hpp"'
  typename: jobject
  typeSignature: 'LHashAlgorithmHelper;'
---
name: HttpClient
typedef: 'interface +o +j'
params: []
prefix: ""
cpp:
  typename: '::ledger::core::api::HttpClient'
  header: '"HttpClient.hpp"'
  byValue: false
objc:
  typename: 'HttpClient'
  pointer: true
  hash: '%s.hash'
  boxed: 'HttpClient'
  header: '"HttpClient.h"'
objcpp:
  translator: '::djinni_generated::HttpClient'
  header: '"HttpClient+Private.h"'
java:
  reference: true
  typename: 'HttpClient'
  writeToParcel: '%s.writeToParcel(out, flags)'
  generic: true
  readFromParcel: 'new %s(in)'
  hash: '%s.hashCode()'
  boxed: 'HttpClient'
jni:
  translator: '::djinni_generated::HttpClient'
  header: '"HttpClient.hpp"'
  typename: jobject
  typeSignature: 'LHttpClient;'
---
name: HttpMethod
typedef: 'enum'
params: []
prefix: ""
cpp:
  typename: '::ledger::core::api::HttpMethod'
  header: '"HttpMethod.hpp"'
  byValue: true
objc:
  typename: 'HttpMethod'
  pointer: false
  hash: '%s.hash'
  boxed: 'NSNumber'
  header: '"HttpMethod.h"'
objcpp:
  translator: '::djinni::Enum<::ledger::core::api::HttpMethod, HttpMethod>'
  header: '"HttpMethod+Private.h"'
java:
  reference: true
  typename: 'HttpMethod'
  writeToParcel: '%s.writeToParcel(out, flags)'
  generic: true
  readFromParcel: 'new %s(in)'
  hash: '%s.hashCode()'
  boxed: 'HttpMethod'
jni:
  translator: '::djinni_generated::HttpMethod'
  header: '"HttpMethod.hpp"'
  typename: jobject
  typeSignature: 'LHttpMethod;'
---
name: HttpReadBodyResult
typedef: 'record'
params: []
prefix: ""
cpp:
  typename: '::ledger::core::api::HttpReadBodyResult'
  header: '"HttpReadBodyResult.hpp"'
  byValue: false
objc:
  typename: 'HttpReadBodyResult'
  pointer: true
  hash: '%s.hash'
  boxed: 'HttpReadBodyResult'
  header: '"HttpReadBodyResult.h"'
objcpp:
  translator: '::djinni_generated::HttpReadBodyResult'
  header: '"HttpReadBodyResult+Private.h"'
java:
  reference: true
  typename: 'HttpReadBodyResult'
  writeToParcel: '%s.writeToParcel(out, flags)'
  generic: true
  readFromParcel: 'new %s(in)'
  hash: '%s.hashCode()'
  boxed: 'HttpReadBodyResult'
jni:
  translator: '::djinni_generated::HttpReadBodyResult'
  header: '"HttpReadBodyResult.hpp"'
  typename: jobject
  typeSignature: 'LHttpReadBodyResult;'
---
name: HttpRequest
typedef: 'interface +c'
params: []
prefix: ""
cpp:
  typename: '::ledger::core::api::HttpRequest'
  header: '"HttpRequest.hpp"'
  byValue: false
objc:
  typename: 'HttpRequest'
  pointer: true
  hash: '%s.hash'
  boxed: 'HttpRequest'
  header: '"HttpRequest.h"'
objcpp:
  translator: '::djinni_generated::HttpRequest'
  header: '"HttpRequest+Private.h"'
java:
  reference: true
  typename: 'HttpRequest'
  writeToParcel: '%s.writeToParcel(out, flags)'
  generic: true
  readFromParcel: 'new %s(in)'
  hash: '%s.hashCode()'
  boxed: 'HttpRequest'
jni:
  translator: '::djinni_generated::HttpRequest'
  header: '"HttpRequest.hpp"'
  typename: jobject
  typeSignature: 'LHttpRequest;'
---
name: HttpUrlConnection
typedef: 'interface +o +j'
params: []
prefix: ""
cpp:
  typename: '::ledger::core::api::HttpUrlConnection'
  header: '"HttpUrlConnection.hpp"'
  byValue: false
objc:
  typename: 'HttpUrlConnection'
  pointer: true
  hash: '%s.hash'
  boxed: 'HttpUrlConnection'
  header: '"HttpUrlConnection.h"'
objcpp:
  translator: '::djinni_generated::HttpUrlConnection'
  header: '"HttpUrlConnection+Private.h"'
java:
  reference: true
  typename: 'HttpUrlConnection'
  writeToParcel: '%s.writeToParcel(out, flags)'
  generic: true
  readFromParcel: 'new %s(in)'
  hash: '%s.hashCode()'
  boxed: 'HttpUrlConnection'
jni:
  translator: '::djinni_generated::HttpUrlConnection'
  header: '"HttpUrlConnection.hpp"'
  typename: jobject
  typeSignature: 'LHttpUrlConnection;'
---
name: LedgerCore
typedef: 'interface +c'
params: []
prefix: ""
cpp:
  typename: '::ledger::core::api::LedgerCore'
  header: '"LedgerCore.hpp"'
  byValue: false
objc:
  typename: 'LedgerCore'
  pointer: true
  hash: '%s.hash'
  boxed: 'LedgerCore'
  header: '"LedgerCore.h"'
objcpp:
  translator: '::djinni_generated::LedgerCore'
  header: '"LedgerCore+Private.h"'
java:
  reference: true
  typename: 'LedgerCore'
  writeToParcel: '%s.writeToParcel(out, flags)'
  generic: true
  readFromParcel: 'new %s(in)'
  hash: '%s.hashCode()'
  boxed: 'LedgerCore'
jni:
  translator: '::djinni_generated::LedgerCore'
  header: '"LedgerCore.hpp"'
  typename: jobject
  typeSignature: 'LLedgerCore;'
---
name: Locale
typedef: 'record'
params: []
prefix: ""
cpp:
  typename: '::ledger::core::api::Locale'
  header: '"Locale.hpp"'
  byValue: false
objc:
  typename: 'Locale'
  pointer: true
  hash: '%s.hash'
  boxed: 'Locale'
  header: '"Locale.h"'
objcpp:
  translator: '::djinni_generated::Locale'
  header: '"Locale+Private.h"'
java:
  reference: true
  typename: 'Locale'
  writeToParcel: '%s.writeToParcel(out, flags)'
  generic: true
  readFromParcel: 'new %s(in)'
  hash: '%s.hashCode()'
  boxed: 'Locale'
jni:
  translator: '::djinni_generated::Locale'
  header: '"Locale.hpp"'
  typename: jobject
  typeSignature: 'LLocale;'
---
name: Lock
typedef: 'interface +o +j'
params: []
prefix: ""
cpp:
  typename: '::ledger::core::api::Lock'
  header: '"Lock.hpp"'
  byValue: false
objc:
  typename: 'Lock'
  pointer: true
  hash: '%s.hash'
  boxed: 'Lock'
  header: '"Lock.h"'
objcpp:
  translator: '::djinni_generated::Lock'
  header: '"Lock+Private.h"'
java:
  reference: true
  typename: 'Lock'
  writeToParcel: '%s.writeToParcel(out, flags)'
  generic: true
  readFromParcel: 'new %s(in)'
  hash: '%s.hashCode()'
  boxed: 'Lock'
jni:
  translator: '::djinni_generated::Lock'
  header: '"Lock.hpp"'
  typename: jobject
  typeSignature: 'LLock;'
---
name: LogPrinter
typedef: 'interface +o +j'
params: []
prefix: ""
cpp:
  typename: '::ledger::core::api::LogPrinter'
  header: '"LogPrinter.hpp"'
  byValue: false
objc:
  typename: 'LogPrinter'
  pointer: true
  hash: '%s.hash'
  boxed: 'LogPrinter'
  header: '"LogPrinter.h"'
objcpp:
  translator: '::djinni_generated::LogPrinter'
  header: '"LogPrinter+Private.h"'
java:
  reference: true
  typename: 'LogPrinter'
  writeToParcel: '%s.writeToParcel(out, flags)'
  generic: true
  readFromParcel: 'new %s(in)'
  hash: '%s.hashCode()'
  boxed: 'LogPrinter'
jni:
  translator: '::djinni_generated::LogPrinter'
  header: '"LogPrinter.hpp"'
  typename: jobject
  typeSignature: 'LLogPrinter;'
---
name: Logger
typedef: 'interface +c'
params: []
prefix: ""
cpp:
  typename: '::ledger::core::api::Logger'
  header: '"Logger.hpp"'
  byValue: false
objc:
  typename: 'Logger'
  pointer: true
  hash: '%s.hash'
  boxed: 'Logger'
  header: '"Logger.h"'
objcpp:
  translator: '::djinni_generated::Logger'
  header: '"Logger+Private.h"'
java:
  reference: true
  typename: 'Logger'
  writeToParcel: '%s.writeToParcel(out, flags)'
  generic: true
  readFromParcel: 'new %s(in)'
  hash: '%s.hashCode()'
  boxed: 'Logger'
jni:
  translator: '::djinni_generated::Logger'
  header: '"Logger.hpp"'
  typename: jobject
  typeSignature: 'LLogger;'
---
name: PathResolver
typedef: 'interface +o +j'
params: []
prefix: ""
cpp:
  typename: '::ledger::core::api::PathResolver'
  header: '"PathResolver.hpp"'
  byValue: false
objc:
  typename: 'PathResolver'
  pointer: true
  hash: '%s.hash'
  boxed: 'PathResolver'
  header: '"PathResolver.h"'
objcpp:
  translator: '::djinni_generated::PathResolver'
  header: '"PathResolver+Private.h"'
java:
  reference: true
  typename: 'PathResolver'
  writeToParcel: '%s.writeToParcel(out, flags)'
  generic: true
  readFromParcel: 'new %s(in)'
  hash: '%s.hashCode()'
  boxed: 'PathResolver'
jni:
  translator: '::djinni_generated::PathResolver'
  header: '"PathResolver.hpp"'
  typename: jobject
  typeSignature: 'LPathResolver;'
---
name: RandomNumberGenerator
typedef: 'interface +o +j'
params: []
prefix: ""
cpp:
  typename: '::ledger::core::api::RandomNumberGenerator'
  header: '"RandomNumberGenerator.hpp"'
  byValue: false
objc:
  typename: 'RandomNumberGenerator'
  pointer: true
  hash: '%s.hash'
  boxed: 'RandomNumberGenerator'
  header: '"RandomNumberGenerator.h"'
objcpp:
  translator: '::djinni_generated::RandomNumberGenerator'
  header: '"RandomNumberGenerator+Private.h"'
java:
  reference: true
  typename: 'RandomNumberGenerator'
  writeToParcel: '%s.writeToParcel(out, flags)'
  generic: true
  readFromParcel: 'new %s(in)'
  hash: '%s.hashCode()'
  boxed: 'RandomNumberGenerator'
jni:
  translator: '::djinni_generated::RandomNumberGenerator'
  header: '"RandomNumberGenerator.hpp"'
  typename: jobject
  typeSignature: 'LRandomNumberGenerator;'
---
name: RoundingMode
typedef: 'enum'
params: []
prefix: ""
cpp:
  typename: '::ledger::core::api::RoundingMode'
  header: '"RoundingMode.hpp"'
  byValue: true
objc:
  typename: 'RoundingMode'
  pointer: false
  hash: '%s.hash'
  boxed: 'NSNumber'
  header: '"RoundingMode.h"'
objcpp:
  translator: '::djinni::Enum<::ledger::core::api::RoundingMode, RoundingMode>'
  header: '"RoundingMode+Private.h"'
java:
  reference: true
  typename: 'RoundingMode'
  writeToParcel: '%s.writeToParcel(out, flags)'
  generic: true
  readFromParcel: 'new %s(in)'
  hash: '%s.hashCode()'
  boxed: 'RoundingMode'
jni:
  translator: '::djinni_generated::RoundingMode'
  header: '"RoundingMode.hpp"'
  typename: jobject
  typeSignature: 'LRoundingMode;'
---
name: Runnable
typedef: 'interface +c'
params: []
prefix: ""
cpp:
  typename: '::ledger::core::api::Runnable'
  header: '"Runnable.hpp"'
  byValue: false
objc:
  typename: 'Runnable'
  pointer: true
  hash: '%s.hash'
  boxed: 'Runnable'
  header: '"Runnable.h"'
objcpp:
  translator: '::djinni_generated::Runnable'
  header: '"Runnable+Private.h"'
java:
  reference: true
  typename: 'Runnable'
  writeToParcel: '%s.writeToParcel(out, flags)'
  generic: true
  readFromParcel: 'new %s(in)'
  hash: '%s.hashCode()'
  boxed: 'Runnable'
jni:
  translator: '::djinni_generated::Runnable'
  header: '"Runnable.hpp"'
  typename: jobject
  typeSignature: 'LRunnable;'
---
name: Secp256k1
typedef: 'interface +c'
params: []
prefix: ""
cpp:
  typename: '::ledger::core::api::Secp256k1'
  header: '"Secp256k1.hpp"'
  byValue: false
objc:
  typename: 'Secp256k1'
  pointer: true
  hash: '%s.hash'
  boxed: 'Secp256k1'
  header: '"Secp256k1.h"'
objcpp:
  translator: '::djinni_generated::Secp256k1'
  header: '"Secp256k1+Private.h"'
java:
  reference: true
  typename: 'Secp256k1'
  writeToParcel: '%s.writeToParcel(out, flags)'
  generic: true
  readFromParcel: 'new %s(in)'
  hash: '%s.hashCode()'
  boxed: 'Secp256k1'
jni:
  translator: '::djinni_generated::Secp256k1'
  header: '"Secp256k1.hpp"'
  typename: jobject
  typeSignature: 'LSecp256k1;'
---
name: ThreadDispatcher
typedef: 'interface +o +j'
params: []
prefix: ""
cpp:
  typename: '::ledger::core::api::ThreadDispatcher'
  header: '"ThreadDispatcher.hpp"'
  byValue: false
objc:
  typename: 'ThreadDispatcher'
  pointer: true
  hash: '%s.hash'
  boxed: 'ThreadDispatcher'
  header: '"ThreadDispatcher.h"'
objcpp:
  translator: '::djinni_generated::ThreadDispatcher'
  header: '"ThreadDispatcher+Private.h"'
java:
  reference: true
  typename: 'ThreadDispatcher'
  writeToParcel: '%s.writeToParcel(out, flags)'
  generic: true
  readFromParcel: 'new %s(in)'
  hash: '%s.hashCode()'
  boxed: 'ThreadDispatcher'
jni:
  translator: '::djinni_generated::ThreadDispatcher'
  header: '"ThreadDispatcher.hpp"'
  typename: jobject
  typeSignature: 'LThreadDispatcher;'
---
name: WalletType
typedef: 'enum'
params: []
prefix: ""
cpp:
  typename: '::ledger::core::api::WalletType'
  header: '"WalletType.hpp"'
  byValue: true
objc:
  typename: 'WalletType'
  pointer: false
  hash: '%s.hash'
  boxed: 'NSNumber'
  header: '"WalletType.h"'
objcpp:
  translator: '::djinni::Enum<::ledger::core::api::WalletType, WalletType>'
  header: '"WalletType+Private.h"'
java:
  reference: true
  typename: 'WalletType'
  writeToParcel: '%s.writeToParcel(out, flags)'
  generic: true
  readFromParcel: 'new %s(in)'
  hash: '%s.hashCode()'
  boxed: 'WalletType'
jni:
  translator: '::djinni_generated::WalletType'
  header: '"WalletType.hpp"'
  typename: jobject
  typeSignature: 'LWalletType;'
---
name: WebSocketClient
typedef: 'interface +o +j'
params: []
prefix: ""
cpp:
  typename: '::ledger::core::api::WebSocketClient'
  header: '"WebSocketClient.hpp"'
  byValue: false
objc:
  typename: 'WebSocketClient'
  pointer: true
  hash: '%s.hash'
  boxed: 'WebSocketClient'
  header: '"WebSocketClient.h"'
objcpp:
  translator: '::djinni_generated::WebSocketClient'
  header: '"WebSocketClient+Private.h"'
java:
  reference: true
  typename: 'WebSocketClient'
  writeToParcel: '%s.writeToParcel(out, flags)'
  generic: true
  readFromParcel: 'new %s(in)'
  hash: '%s.hashCode()'
  boxed: 'WebSocketClient'
jni:
  translator: '::djinni_generated::WebSocketClient'
  header: '"WebSocketClient.hpp"'
  typename: jobject
  typeSignature: 'LWebSocketClient;'
---
name: WebSocketConnection
typedef: 'interface +c'
params: []
prefix: ""
cpp:
  typename: '::ledger::core::api::WebSocketConnection'
  header: '"WebSocketConnection.hpp"'
  byValue: false
objc:
  typename: 'WebSocketConnection'
  pointer: true
  hash: '%s.hash'
  boxed: 'WebSocketConnection'
  header: '"WebSocketConnection.h"'
objcpp:
  translator: '::djinni_generated::WebSocketConnection'
  header: '"WebSocketConnection+Private.h"'
java:
  reference: true
  typename: 'WebSocketConnection'
  writeToParcel: '%s.writeToParcel(out, flags)'
  generic: true
  readFromParcel: 'new %s(in)'
  hash: '%s.hashCode()'
  boxed: 'WebSocketConnection'
jni:
  translator: '::djinni_generated::WebSocketConnection'
  header: '"WebSocketConnection.hpp"'
  typename: jobject
  typeSignature: 'LWebSocketConnection;'
