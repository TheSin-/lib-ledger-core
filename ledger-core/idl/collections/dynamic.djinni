# Enumeration of supported types in DynamicArray and DynamicObject.
DynamicType = enum {
    # A dynamic object, composed of DynamicType indexed by strings.
    OBJECT;
    # A 32-bit integer.
    INT32;
    # A 64-bit integer.
    INT64;
    # A double-precision floating point number.
    DOUBLE;
    # A boolean.
    BOOLEAN;
    # A contiguous, unsized bytes array.
    DATA;
    # An array of DynamicType values.
    ARRAY;
    # A string.
    STRING;
    # Just an undefined value.
    UNDEFINED;
}

# A collection of dynamic values in an array. Values can be retrieved via their indexes.
DynamicArray = interface +c {
    # Get count of values.
    # @return 64-bit integer
    size(): i64;

    # Push a 32-bit integer.
    # @param value, 32-bit integer
    # @return DynamicArray with value stored in it
    pushInt(value: i32): DynamicArray;

    # Push a 64-bit integer.
    # @param value, 64-bit integer
    # @return DynamicArray with value stored in it
    pushLong(value: i64): DynamicArray;

    # Push a string.
    # @param value, string
    # @return DynamicArray with value stored in it
    pushString(value: string): DynamicArray;

    # Push a double.
    # @param value, double
    # @return DynamicArray with value stored in it
    pushDouble(value: f64): DynamicArray;

    # Push a binary.
    # @param value, binary
    # @return DynamicArray with value stored in it
    pushData(value: binary): DynamicArray;

    # Push a bool.
    # @param value, bool
    # @return DynamicArray with value stored in it
    pushBoolean(value: bool): DynamicArray;

    # Push a dynamic object.
    # @param value, DynamicObject
    # @return DynamicArray with value stored in it
    pushObject(value: DynamicObject): DynamicArray;

    # Push a dynamic array.
    # @param value, DynamicArray
    # @return DynamicArray with value stored in it
    pushArray(value: DynamicArray): DynamicArray;

    # Get a string at a given index.
    # @param index, 64-bit integer
    # @return Optional string
    getString(index: i64): optional<string>;

    # Get 32-bit integer at a given index.
    # @param index, 64-bit integer
    # @return Optional 32-bit integer
    getInt(index: i64): optional<i32>;

    # Get 64-bit integer at a given index.
    # @param index, 64-bit integer
    # @return Optional 64-bit integer
    getLong(index: i64): optional<i64>;

    # Get double at a given index.
    # @param index, 64-bit integer
    # @return Optional double
    getDouble(index: i64): optional<f64>;

    # Get binary at a given index.
    # @param index, 64-bit integer
    # @return Optional binary
    getData(index: i64): optional<binary>;

    # Get bool at a given index.
    # @param index, 64-bit integer
    # @return Optional bool
    getBoolean(index: i64): optional<bool>;

    # Get DynamicObject object at a given index.
    # @param index, 64-bit integer
    # @return Optional DynamicObject
    getObject(index: i64): optional<DynamicObject>;

    # Get DynamicArray object at a given index.
    # @param index, 64-bit integer
    # @return Optional DynamicArray
    getArray(index: i64): optional<DynamicArray>;

    # Concatenate current DynamicArray with another one.
    # @param array, DynamicArray object to concatenate with
    # @return DynamicArray object, concatenated DynamicArray
    concat(array: DynamicArray): DynamicArray;

    # Get type of value stored at a given index.
    # @param index, 64 bits integer
    # @return Optional DynamicType enum entry
    getType(index: i64): optional<DynamicType>;

    # Delete value stored at given index.
    # @param index, 64 bits integer
    # @return bool, true if deletion succeeded
    remove(index: i64): bool;

    # Dump whole object's content as string.
    # @return string, the string representation of the array
    dump(): string;

    # Serialize whole object to a binary.
    # @return binary, the serialized array
    serialize(): binary;

    # Get readonly status of object.
    # @return bool, whether the array is in read-only mode
    isReadOnly(): bool;

    # Create a new instance of DynamicArray class.
    # @return DynamicArray, a brand new instance of a dynamic array
    static newInstance(): DynamicArray;

    # Parse a binary to a DynamicArray.
    # @param serialized, binary to parse
    # @return Optional, the unserialized dynamic array
    static load(serialized: binary): optional<DynamicArray>;
}

# Class representing an object that stores values of different types of objects,
# those values are appended dynamically in a map like structure with a given key through which they
# can be retreived.
DynamicObject = interface +c {
    # Store a string with a given key.
    # @param key, string, key to access stored value
    # @param value, string
    # @return DynamicObject object with value stored in it
    putString(key: string, value: string): DynamicObject;

    # Store a 32-bit integer with a given key.
    # @param key, string, key to access stored value
    # @param value, 32-bit integer
    # @return DynamicObject object with value stored in it
    putInt(key: string, value: i32): DynamicObject;

    # Store a 64-bit integer with a given key.
    # @param key, string, key to access stored value
    # @param value, 64-bit integer
    # @return DynamicObject object with value stored in it
    putLong(key: string, value: i64): DynamicObject;

    # Store a double with a given key.
    # @param key, string, key to access stored value
    # @param value, double
    # @return DynamicObject object with value stored in it
    putDouble(key: string, value: f64): DynamicObject;

    # Store a binary integer with a given key.
    # @param key, string, key to access stored value
    # @param value, binary
    # @return DynamicObject object with value stored in it
    putData(key: string, value: binary): DynamicObject;

    # Store a boolean integer with a given key.
    # @param key, string, key to access stored value
    # @param value, bool
    # @return DynamicObject object with value stored in it
    putBoolean(key: string, value: bool): DynamicObject;

    # Store another DynamicObject object with a given key.
    # @param key, string, key to access stored value
    # @return DynamicObject object with value stored in it
    putObject(key: string, value: DynamicObject): DynamicObject;

    # Store a DynamicArray object with a given key.
    # @param key, string, key to access stored reference
    # @return DynamicArray object with value stored in it
    putArray(key: string, value: DynamicArray): DynamicObject;

    # Get, if exists, stored string having a specific key.
    # @param key, string, key of string to look for
    # @return Optional string
    getString(key: string): optional<string>;

    # Get, if exists, stored 32 bits integer having a specific key.
    # @param key, string, key of 32 bits integer to look for
    # @return Optional 32 bits integer
    getInt(key: string): optional<i32>;

    # Get, if exists, stored 64 bits integer having a specific key.
    # @param key, string, key of 64 bits integer to look for
    # @return Optional 64 bits integer
    getLong(key: string): optional<i64>;

    # Get, if exists, stored double having a specific key.
    # @param key, string, key of double to look for
    # @return Optional double
    getDouble(key: string): optional<f64>;

    # Get, if exists, stored binary having a specific key.
    # @param key, string, key of binary to look for
    # @return Optional binary
    getData(key: string): optional<binary>;

    # Get, if exists, stored bool having a specific key.
    # @param key, string, key of bool to look for
    # @return Optional bool
    getBoolean(key: string): optional<bool>;

    # Get, if exists, stored DynamicObject having a specific key.
    # @param key, string, key of DynamicObject to look for
    # @return Optional DynamicObject
    getObject(key: string): optional<DynamicObject>;

    # Get, if exists, stored DynamicArray having a specific key.
    # @param key, string, key of DynamicArray to look for
    # @return Optional DynamicArray
    getArray(key: string): optional<DynamicArray>;

    # Check if a key was used to store a value.
    # @param key, string, key to look for
    # @return bool
    contains(key: string): bool;

    # Delete key and value stored with it.
    # @param key, string, key to look for
    # @return bool, true if key exists and deletion succeeded, false otherwise
    remove(key: string): bool;

    # Get list of keys.
    # @return list of string, list all stored keys
    getKeys(): list<string>;

    # Get type of object stored with specific key.
    # @param key, string, key to look for
    # @return Optional DynamicType enum entry
    getType(key: string): optional<DynamicType>;

    # Dump whole object's content as string.
    # @return string
    dump(): string;

    # Serialize whole object to a binary.
    # @return binary
    serialize(): binary;

    # Get readonly status of object.
    # @param bool
    isReadOnly(): bool;

    # Get count of stored references.
    # @return 64 bits integer
    size(): i64;

    # Create a new instance of DynamicObject class.
    # @return DynamicObject instance
    static newInstance(): DynamicObject;

    # Parse a binary to a DynamicObject.
    # @param serialized, binary to parse
    # @return Optional DynamicObject
    static load(serialized: binary): optional<DynamicObject>;
}
