@import "thread_dispatcher.djinni"

# Class representing a printer of errors, warnings, infos ... (at runtime).
# Printed logs are stored in path set by PathResolver::resolveLogFilePath.
LogPrinter = interface +j +o +n {
    # Print different encountered errors.
    # @param message, string
    printError(message: string);

    # Print useful information messages.
    # @param message, string
    printInfo(message: string);

    # Print debug messages.
    # @param message string
    printDebug(message: string);

    # Print warning messages.
    # @param message, string
    printWarning(message: string);

    # Print messages from APDU command interpretation loop.
    # @param message, string
    printApdu(message: string);

    # Print critical errors causing a core dump or error from which recovery is impossible.
    # @param message, string
    printCriticalError(message: string);

    # Get context in which printer is executed (print).
    # @return ExecutionContext object
    getContext(): ExecutionContext;
}

# Class to print logs to console.
Logger = interface +c {
    # Print debug message to console.
    # @param tag, string
    # @param message, string
    d(tag: string, message: string);
    # Print information message to console.
    # @param tag, string
    # @param message, string
    i(tag: string, message: string);
    # Print error message to console.
    # @param tag, string
    # @param message, string
    e(tag: string, message: string);
    # Print warning message to console.
    # @param tag, string
    # @param message, string
    w(tag: string, message: string);
    # Print critical error message to console.
    # @param tag, string
    # @param message, string
    c(tag: string, message: string);
}

